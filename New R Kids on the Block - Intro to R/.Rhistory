lscrap_diff3_cse <- dfa * vcovHC(lscrap_diff3, type = "HC0", cluster = "group", adjust = T)
coeftest(lscrap_diff3, vcov = lscrap_diff3_cse)
lscrap_diff3 <- lm(clscrap~cgrant+ d89+d88, jtrain_3)
# display with cluster VCE and df-adjustment
lscrap_diff3_cse <- dfa * vcovHC(lscrap_diff3, type = "HC0", cluster = "group", adjust = T)
coeftest(lscrap_diff3, vcov = lscrap_diff3_cse)
# display with cluster VCE and df-adjustment
lscrap_pols_cse <- dfa * vcovHC(lscrap_pols, type = "HC0", cluster = "group", adjust = T)
lscrap_pols <- lm(lscrap~ grant+grant_1+d88+d89, jtrain)
G <- length(unique(jtrain$fcode))
N <- length(jtrain$fcode)
dfa <- (G/(G - 1)) * (N - 1)/lscrap_pols$df.residual
# display with cluster VCE and df-adjustment
lscrap_pols_cse <- dfa * vcovHC(lscrap_pols, type = "HC0", cluster = "group", adjust = T)
coeftest(lscrap_pols, vcov = lscrap_pols_cse)
lscrap_fe <- plm(lscrap ~ grant+grant_1+d88+d89,
data = jtrain,
index = c("fcode", "year"),
model = "within")
#without clustered standard errors
summary(lscrap_fe)
lscrap_fe_cse <- dfa * vcovHC(lscrap_fe, type = "HC0", cluster = "group", adjust = T)
coeftest(lscrap_fe, vcov = lscrap_fe_cse)
#with clustered standard errors
data(wagepan)
reg_tfe <- lm(lwage ~ educ+exper+union+married+d81:d87, wagepan)
summary(reg_tfe)
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/reg_tfe$df.residual
reg_tfe_cse <- dfa * vcovHC(reg_tfe, type = "HC0", cluster = "group", adjust = T)
coeftest(reg_tfe, vcov = reg_tfe_cse)
data(wagepan)
reg_tfe <- lm(lwage ~ educ+exper+union+married+d81+d82+d83+d85+d85+d86, wagepan)
summary(reg_tfe)
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/reg_tfe$df.residual
reg_tfe_cse <- dfa * vcovHC(reg_tfe, type = "HC0", cluster = "group", adjust = T)
coeftest(reg_tfe, vcov = reg_tfe_cse)
random_wage <- plm(lwage~educ+exper+union+married+d81+d82+d83+d85+d85+d86, data = wagepan, index = c("nr", "year"), model = "random")
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/random_wage$df.residual
random_wage_cse <- dfa * vcovHC(random_wage, type = "HC0", cluster = "group", adjust = T)
coeftest(random_wage, vcov = random_wage_cse)
# so, here, we are doing a two-way fixed effects model using the option "twoways"
fixed_wage <- plm(lwage~educ+exper+union+married,
data = wagepan,
index = c("nr", "year"),
model = "within",
effect = "twoways")
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/fixed_tw_wage$df.residual
# so, here, we are doing a two-way fixed effects model using the option "twoways"
fixed_wage <- plm(lwage~educ+exper+union+married,
data = wagepan,
index = c("nr", "year"),
model = "within",
effect = "twoways")
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/fixed_wage$df.residual
fixed_wage_cse <- dfa * vcovHC(fixed_wage, type = "HC0", cluster = "group", adjust = T)
coeftest(fixed_tw_wage, vcov = fixed_wage_cse)
# so, here, we are doing a two-way fixed effects model using the option "twoways"
fixed_wage <- plm(lwage~educ+exper+union+married,
data = wagepan,
index = c("nr", "year"),
model = "within",
effect = "twoways")
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/fixed_wage$df.residual
fixed_wage_cse <- dfa * vcovHC(fixed_wage, type = "HC0", cluster = "group", adjust = T)
coeftest(fixed_wage, vcov = fixed_wage_cse)
# so, here, we are doing a two-way fixed effects model using the option "twoways"
fixed_wage <- plm(lwage~educ+exper+exper*exper+union+married,
data = wagepan,
index = c("nr", "year"),
model = "within",
effect = "twoways")
#clustered se
G <- length(unique(wagepan$nr))
N <- length(wagepan$nr)
dfa <- (G/(G - 1)) * (N - 1)/fixed_wage$df.residual
fixed_wage_cse <- dfa * vcovHC(fixed_wage, type = "HC0", cluster = "group", adjust = T)
coeftest(fixed_wage, vcov = fixed_wage_cse)
random_wage <- plm(lwage~union+married+d81:d87, data = wagepan, index = c("nr", "year"), model = "random")
fixed_wage <- plm(lwage~educ+exper+union+married,
data = wagepan,
index = c("nr", "year"),
model = "within",
effect = "twoways")
#the hausman test
phtest(random_wage, fixed_wage)
# the robust test with additional parameters is:
phtest(lwage~educ+exper+union+married, data = wagepan, method = "aux",
vcov = function(x) vcovHC(x, method="white2", type="HC3"))
data("airfare")
airfare_tfe <- lm(lfare~concen+ldist+ldistsq+y98+y99+y00, data = airfare)
summary(airfare_tfe)
#clustered se
G <- length(unique(airfare$id))
N <- length(airfare$id)
dfa <- (G/(G - 1)) * (N - 1)/airfare_tfe$df.residual
airfare_tfe_cse <- dfa * vcovHC(airfare_tfe, type = "HC0", cluster = "group", adjust = T)
coeftest(airfare_tfe, vcov = airfare_tfe_cse)
random_air <- plm(lfare~concen+ldist+ldistsq ,
data =airfare,
index = c("id", "year"),
model = "random",
effect = "twoways")
#clustered se
G <- length(unique(airfare$id))
N <- length(airfare$id)
dfa <- (G/(G - 1)) * (N - 1)/random_air$df.residual
random_air_cse <- dfa * vcovHC(random_air, type = "HC0", cluster = "group", adjust = T)
coeftest(random_air, vcov = random_air_cse)
summary(random_air)
random_air <- plm(lfare~concen+ldist+ldistsq +y98+y99+y00,
data =airfare,
index = c("id", "year"),
model = "random",
effect = "twoways")
random_air <- plm(lfare~concen+ldist+ldistsq +y98+y99,
data =airfare,
index = c("id", "year"),
model = "random",
effect = "twoways")
random_air <- plm(lfare~concen+ldist+ldistsq,
data =airfare,
index = c("id", "year"),
model = "random",
effect = "twoways")
#clustered se
G <- length(unique(airfare$id))
N <- length(airfare$id)
dfa <- (G/(G - 1)) * (N - 1)/random_air$df.residual
random_air_cse <- dfa * vcovHC(random_air, type = "HC0", cluster = "group", adjust = T)
coeftest(random_air, vcov = random_air_cse)
summary(random_air)
random_air <- plm(lfare~concen ,
data =airfare,
index = c("id", "year"),
model = "random",
effect = "twoways")
#clustered se
G <- length(unique(airfare$id))
N <- length(airfare$id)
dfa <- (G/(G - 1)) * (N - 1)/random_air$df.residual
random_air_cse <- dfa * vcovHC(random_air, type = "HC0", cluster = "group", adjust = T)
summary(random_air)
coeftest(random_air, vcov = random_air_cse)
fixed_air <- plm(lfare~concen+ ldist +ldistsq ,
data =airfare,
index = c("id", "year"),
model = "within",
effect = "twoways")
#clustered se
G <- length(unique(airfare$id))
N <- length(airfare$id)
dfa <- (G/(G - 1)) * (N - 1)/fixed_air$df.residual
fixed_air_cse <- dfa * vcovHC(fixed_air, type = "HC0", cluster = "group", adjust = T)
summary(fixed_air)
coeftest(fixed_air, vcov = fixed_air_cse)
library(wooldridge)
data("mroz")
library(car)
library(AER)
#recall this is just your ordinary ols estimation
lpm <- lm(inlf ~nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz )
lpm_robust <-coeftest(lpm, vcov = vcovHC, type = "HC0")
lpm_robust
library(wooldridge)
data("mroz")
library(car)
library(AER)
#recall this is just your ordinary ols estimation
lpm <- lm(inlf ~ nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz )
lpm_robust <-coeftest(lpm, vcov = vcovHC, type = "HC0")
lpm_robust
library(wooldridge)
data("mroz")
library(car)
library(AER)
#recall this is just your ordinary ols estimation
lpm <- lm(inlf ~ nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz )
lpm_robust <-coeftest(lpm, vcov = vcovHC, type = "HC0")
lpm_robust
probit <- glm(inlf ~nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz, family = binomial(link = "probit"))
probit <- glm(inlf ~nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz, family = binomial(link = "probit"))
probit
probit <- glm(inlf ~nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz, family = binomial(link = "probit"))
summary(probit)
logit <- glm(inlf ~nwifeinc +educ+ exper+ I(exper*exper)+age+kidslt6+kidsge6, data =mroz , family = "binomial")
summary(logit)
library(margins)
lpm_robust
#calculate average marginal effects
logit_m <-margins(logit)
summary(logit_m)
probit_m <-margins(probit)
summary(probit_m)
library(sjPlot)
library(ggplot2)
#here's educ
plot_model(logit, type = "pred", terms = "educ")
plot_model(probit, type = "pred", terms = "educ")
#here's experience (and note that this is a squared term)
plot_model(logit, type = "pred", terms = "exper")
library(sjPlot)
library(ggplot2)
#here's educ
plot_model(logit, type = "pred", terms = "educ")
plot_model(probit, type = "pred", terms = "educ")
#here's experience (and note that this is a squared term)
plot_model(lpm_robust, type = "pred", terms = "exper")
library(sjPlot)
library(ggplot2)
#here's educ
plot_model(logit, type = "pred", terms = "educ")
plot_model(probit, type = "pred", terms = "educ")
#here's experience (and note that this is a squared term)
plot_model(logit, type = "pred", terms = "exper")
library(sjPlot)
library(ggplot2)
#here's educ
plot_model(logit, type = "pred", terms = "educ")
plot_model(probit, type = "pred", terms = "educ")
#here's experience (and note that this is a squared term)
plot_model(lpm_robust, type = "pred", terms = "exper")
library(sjPlot)
library(ggplot2)
#here's educ
plot_model(logit, type = "pred", terms = "educ")
plot_model(probit, type = "pred", terms = "educ")
#here's experience (and note that this is a squared term)
plot_model(logit, type = "pred", terms = "exper")
knitr::opts_chunk$set(echo = FALSE)
library(stargazer)
#wdi$NY.GDP.MKTP.KD.ZG
```{r}
x <- 'hi there!'
x
y= 'bye'
setwd('/Users/mkaltenberg/Documents/GitHub/Data_Analysis_Python_R/New R Kids on the Block/')
```{r}
(y <- seq(0, 10, 2))
read.csv('job-automation-probability.csv')
jobs <- read.csv('job-automation-probability.csv')
Exporting data is also easy:
help(seq)
help('read.csv')
You can also removing EVERYTHING in your environment with:
You can also removing EVERYTHING in your environment with:
```{r}
rm(list = ls())
```{r}
library(readr)
jobs = read_csv('job-automation-probability.csv')
# IF you want to specify the delimiter
jobs = read_delim('job-automation-probability.csv',  delim = ',')
knitr::opts_chunk$set(echo = FALSE)
library(stargazer)
wdi <-as_tibble(wdi)
library(WDI)
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
wdi
```
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
library(dplyr)
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
View(wdi)
View(wdi)
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
WDIsearch('gdp')
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
WDIsearch('debt')
wdi <- WDI(country = "all", start=2000, end=2015, extra="TRUE",
indicator=c("NY.GDP.MKTP.KD.ZG"))
library(tidyverse)
wdi <-as_tibble(wdi)
#it's just that easy
wdi$NY.GDP.MKTP.KD.ZG
#wdi$NY.GDP.MKTP.KD.ZG
wdi %>% filter(str_detect(wdi$country, "$World"))
wdi %>% filter(str_detect(wdi$country, "^World"))
wdi %>% filter(str_detect(wdi$country, "^d"))
wdi %>% filter(str_detect(wdi$country, "^World"))
wdi_wide <- wdi %>% pivot_wider(names_from=year,values_from=gdp)
#Don't forget to assign it!
wdi$gdp <- str_replace_all(wdi$gdp, "[,$!]", "")
wdi %>% filter(str_detect(wdi$country, "^World"))
#Don't forget to assign it!
wdi$gdp <- str_replace_all(wdi$gdp, "[,$!]", "")
jobs = read_csv('job-automation-probability.csv')
# IF you want to specify the delimiter
jobs = read_delim('job-automation-probability.csv',  delim = ',')
```{r}
names(jobs)
jobs %>% select(c('_ - code', 'prob', 'Average.annual.wage',
'education', 'numbEmployed'))
names(jobs)
jobs %>% select(c('_ - code', 'prob', 'Average annual wage',
'education', 'numbEmployed'))
```{r}
select(jobs, c('_ - code', 'prob', 'Average annual wage',
'education', 'numbEmployed'))
##### Dropping columns
you just include the negative sign before the column list, and that will drop the selected columns you listed
names(jobs)
select(jobs, code= '_ - code' , '_ - rank')
```{r}
rename(jobs, code='_ - code' , rank= '_ - rank')
mutate(jobs,
diff = 'Average annual wage' - 'median_ann_wage')
mutate(jobs,
diff = 'Average annual wage' - 'median_ann_wage')
mutate(jobs,
diff = 'Average annual wage' - 'median_ann_wage')
rlang::last_trace()
mutate(jobs,
diff = Average annual wage - median_ann_wage)
mutate(jobs,
diff = "Average annual wage" - "median_ann_wage")
```{r}
names(jobs)
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', Average annual wage = 'Avg_ann_wage')
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', 'Average annual wage' = 'Avg_ann_wage')
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', "Average annual wage" = 'Avg_ann_wage')
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', Avg_ann_wage = "Average annual wage")
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', avg_ann_wage = "Average annual wage")
read.csv('job-automation-probability.csv')
#Don't forget to assign it!
jobs <- read.csv('job-automation-probability.csv')
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', avg_ann_wage = "Average annual wage")
View(jobs)
read.csv('job-automation-probability.csv')
#Don't forget to assign it!
jobs <- read.csv('job-automation-probability.csv')
names(jobs)
jobs %>% select(c('_ - code', 'prob', 'Average annual wage',
'education', 'numbEmployed'))
library(readr)
jobs = read_csv('job-automation-probability.csv')
# IF you want to specify the delimiter
jobs = read_delim('job-automation-probability.csv',  delim = ',')
names(jobs)
jobs %>% select(c('_ - code', 'prob', 'Average annual wage',
'education', 'numbEmployed'))
select(jobs, c('_ - code', 'prob', 'Average annual wage',
'education', 'numbEmployed'))
select(jobs, -c('probability','_ - rank','employed_may2016' ,'average_ann_wage','len'))
jobs <-rename(jobs, code= '_ - code' , rank= '_ - rank', avg_ann_wage = "Average annual wage")
mutate(jobs,
diff = avg_ann_wage - median_ann_wage)
wdi$gdp <- str_replace_all(wdi$gdp, "[,$!]", "")
wdi <- rename(wdi,  gdp= 'NY.GDP.MKTP.KD.ZG')
wdi <- str_replace_all(wdi, gdp, "[,$!]", "")
wdi$gdp <- str_replace_all(wdi$gdp, "[,$!]", "")
wdi$gdp <- str_replace_all(wdi, gdp, "[,$!]", "")
knitr::opts_chunk$set(echo = FALSE)
library(stargazer)
wage=read_dta("/Users/mkaltenberg/Documents/GitHub/Data_Analysis_Python_R/Data Wrangling and Intro to Regressions/WAGE1.DTA")
library(haven)
wage=read_dta("/Users/mkaltenberg/Documents/GitHub/Data_Analysis_Python_R/Data Wrangling and Intro to Regressions/WAGE1.DTA")
names(wage)
jobs = read.csv('/Users/mkaltenberg/Documents/GitHub/Data_Analysis_Python_R/Becoming a Viz Kid/job-automation-probability.csv')
ols <- lm(prob ~ average_ann_wage + numbEmployed , data = jobs)
View(ols)
View(ols)
summary(ols)
summary(ols)$coefficients
ols2 <- lm(prob ~ average_ann_wage + numbEmployed , data = jobs %>% filter(!(grepl("No formal educational credential", education))))
summary(ols2)
ols2 <- lm(prob ~ education +numbEmployed+median_ann_wage, data = jobs)
stargazer(ols, ols2 , type = "text",  title = "My Data Models")
stargazer(ols, ols2, type = "html", out = "regression.html" ,title = "My models")
stargazer(ols, int, ols_edu, type = "html",   column.labels = c("OLS", "Interaction", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
ols_edu = lm_robust(prob ~ average_ann_wage + numbEmployed + factor(education), data = jobs)
jobs_noedu =
jobs %>%
filter(education != "No formal educational credential")
# filter(!(grepl("No formal educational credential", name))) ## This also works
ols2 <- lm(prob ~ average_ann_wage + numbEmployed , data = jobs_noedu)
summary(ols2)
library(estimatr)
ols1_robust = lm_robust(prob ~ average_ann_wage + numbEmployed , data = jobs)
summary(ols1_robust)
ols_edu = lm_robust(prob ~ average_ann_wage + numbEmployed + factor(education), data = jobs)
summary(ols_edu)
stargazer(ols, ols1_robust, ols_edu, type = "html",   column.labels = c("OLS", "Interaction", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, ols_edu, type = "html",   column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",  column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE)
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html")
ols_edu = lm_robust(prob ~ average_ann_wage + numbEmployed + factor(education), data = jobs)
summary(ols_edu)
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
title            = "OLS Results",
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, type = "html",  out = "regression_all.html")
stargazer(ols, ols1_robust, type = "html",  out = "regression_all.html")
stargazer(ols, ols)edu, type = "html",  out = "regression_all.html")
stargazer(ols, ols_edu, type = "html",  out = "regression_all.html")
install.packages("MASS")
stargazer(ols, ols2, type = "html", out = "regression.html" ,title = "My models")
stargazer(ols, ols2, type = "html",  out = "regression_all.html")
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, ols_edu, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols2, type = "html", out = "regression.html", title = "My models")
stargazer(ols, ols2, ols_edu, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols2, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols1_robust, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, int, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
stargazer(ols, ols2, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "Robust OLS", "HS+"), model.names = FALSE,
covariate.labels = c("Pop", "Edu", "Constant"),
dep.var.labels   = "GDP per capita")
ols2 <- lm(prob ~ education +numbEmployed+median_ann_wage, data = jobs)
stargazer(ols, ols2 , type = "text",  title = "My Data Models")
stargazer(ols, ols2, type = "html", out = "regression.html", title = "My models")
stargazer(ols, ols2, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "OLS"), model.names = FALSE,
covariate.labels = c("Avg. Salary", "BA", "PhD+", "HS", "MA", "None", "Postsecond", "Some College", "N emp", "Med Salary"),
dep.var.labels   = "Prob. of Automated Job")
library(modelsummary)
msummary(list(ols, int, ols_edu))
int = lm_robust(prob ~ average_ann_wage + numbEmployed*education, data = jobs)
summary(int)
library(modelsummary)
msummary(list(ols, int, ols_edu))
library(modelsummary)
library(tidyverse)
datasummary_skim(wdi)
library(modelsummary)
library(tidyverse)
datasummary_skim(jobs)
# Or you can use vtable
library(vtable)
vtable(jobs)
#notice that it prints in "viewer" are of R Studio
stargazer(ols, ols1_robust, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "OLS"), model.names = FALSE,
covariate.labels = c("Avg. Salary", "BA", "PhD+", "HS", "MA", "None", "Postsecond", "Some College", "N emp", "Med Salary"),
dep.var.labels   = "Prob. of Automated Job")
stargazer(ols, ols2, type = "html",  out = "regression_all.html",
title            = "OLS Results",
column.labels = c("OLS", "OLS"), model.names = FALSE,
covariate.labels = c("Avg. Salary", "BA", "PhD+", "HS", "MA", "None", "Postsecond", "Some College", "N emp", "Med Salary"),
dep.var.labels   = "Prob. of Automated Job")
tidyverse_update()
